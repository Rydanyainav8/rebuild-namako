security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Admin:
            algorithm: auto
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        admin:
            entity:
                class: App\Entity\Admin
                property: username

        user:
            entity: 
                class: App\Entity\User
                property: username

        chain_provider:
            chain:  
                providers: [admin, user]
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # pattern: ^/admin
            lazy: true 
            provider: chain_provider
            custom_authenticator: App\Security\AppUserAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
        users:
            pattern: ^/crediter/
            lazy: true
            provider: user
            custom_authenticator:
                - App\Security\AppUsersAuthenticator
            logout: 
                path: app_logout
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_SUPADMIN: ['ROLE_CATI', 'ROLE_BGA']
        ROLE_CATI: ['ROLE_CATI']
        ROLE_BG: ['ROLE_BG']
        ROLE_BGA: ['ROLE_BGA']

    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS}
        - { path: ^/Admin, roles: ROLE_SUPADMIN } 
        - { path: ^/crediter, roles: ROLE_BG }
        - { path: ^/debiter, roles: ROLE_BG }
        - { path: ^/carnet, roles: ROLE_CATI }
        - { path: ^/ticket, roles: ROLE_CATI }
        - { path: ^/adminbg, roles: ROLE_BGA }
        # - { path: ^/user, roles: ROLE_BGA}
        # - { path: ^/home, roles: [ROLE_SUPADMIN, ROLE_USER, ROLE_CATI] }
        
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
